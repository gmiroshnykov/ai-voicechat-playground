#!/usr/bin/env node

import 'dotenv/config';
import path from 'path';
import fs from 'fs';
import { fileURLToPath } from 'url';
import WebSocket from 'ws';

if (!process.env.OPENAI_API_KEY) {
  console.error('Please set your OPENAI_API_KEY environment variable');
  process.exit(1);
}

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

async function testTranscriptionWS() {
  const audioFile = path.join(__dirname, '..', 'audio', 'count-padded-10s.raw');

  console.log('Connecting to OpenAI Realtime API...');

  const ws = new WebSocket('wss://api.openai.com/v1/realtime?intent=transcription', {
    headers: {
      'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
      'OpenAI-Beta': 'realtime=v1'
    }
  });

  ws.on('open', () => {
    console.log('Connected! Configuring transcription session...');

    // Configure transcription session
    ws.send(JSON.stringify({
      type: 'transcription_session.update',
      session: {
        input_audio_format: 'pcm16',
        input_audio_transcription: {
          model: 'gpt-4o-transcribe',
          prompt: 'This is English speech with numbers and common words.',
          language: 'en'
        },
        turn_detection: {
          type: 'server_vad',
          threshold: 0.5,
          prefix_padding_ms: 300,
          silence_duration_ms: 500
        },
        // turn_detection: {
        //   type: 'semantic_vad',
        //   eagerness: 'high',
        // },
        input_audio_noise_reduction: {
          type: 'near_field'
        }
      }
    }));
  });

  ws.on('message', (data) => {
    try {
      const event = JSON.parse(data.toString());

      // console.log('Event:', event);

      switch (event.type) {
        case 'transcription_session.created':
          console.log('Transcription session created!');
          startAudioStreaming();
          break;

        case 'transcription_session.updated':
          console.log('Transcription session configured!');
          break;

        case 'input_audio_buffer.speech_started':
          console.log('🎤 Speech detected...');
          break;

        case 'input_audio_buffer.speech_stopped':
          console.log('🔇 Speech ended');
          break;

        case 'conversation.item.input_audio_transcription.delta':
          if (event.delta) {
            process.stdout.write(event.delta);
          }
          break;

        case 'conversation.item.input_audio_transcription.completed':
          console.log(`\nFinal transcript: "${event.transcript}"`);
          break;

        case 'input_audio_buffer.committed':
          console.log('Audio buffer committed');
          break;

        case 'error':
          console.error('❌ API Error:', event.error);
          break;

        default:
          console.log('📨 Event:', event.type);
          break;
      }
    } catch (error) {
      console.error('Error parsing message:', error);
    }
  });

  ws.on('error', (error) => {
    console.error('WebSocket error:', error);
  });

  ws.on('close', () => {
    console.log('WebSocket connection closed');
    process.exit(0);
  });

  function startAudioStreaming() {
    console.log('Starting audio streaming...');

    // PCM16 at 24kHz = 24000 samples/sec * 2 bytes = 48000 bytes/sec
    const BYTES_PER_SECOND = 48000;
    const CHUNK_SIZE = 4800; // 100ms chunks
    const CHUNK_INTERVAL = 100; // ms

    const audioBuffer = fs.readFileSync(audioFile);
    let offset = 0;

    const streamInterval = setInterval(() => {
      if (offset >= audioBuffer.length) {
        console.log('All audio sent!');
        clearInterval(streamInterval);

        // Wait a bit for final transcription, then exit
        setTimeout(() => {
          console.log('Test complete, exiting...');
          ws.close();
        }, 3000);
        return;
      }

      const chunk = audioBuffer.subarray(offset, offset + CHUNK_SIZE);
      const audioBase64 = chunk.toString('base64');

      ws.send(JSON.stringify({
        type: 'input_audio_buffer.append',
        audio: audioBase64
      }));

      // console.log(`Sent chunk: ${chunk.length} bytes (offset: ${offset})`);
      offset += CHUNK_SIZE;
    }, CHUNK_INTERVAL);
  }
}

await testTranscriptionWS();