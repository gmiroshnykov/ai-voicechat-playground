#!/usr/bin/env node

import 'dotenv/config';
import path from 'path';
import fs from 'fs';
import { fileURLToPath } from 'url';
import { execSync } from 'child_process';
import { RealtimeAgent, RealtimeSession } from '@openai/agents/realtime';

if (!process.env.OPENAI_API_KEY) {
  console.error('Please set your OPENAI_API_KEY environment variable');
  process.exit(1);
}

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

async function testTranscription() {
  const audioFile = path.join(__dirname, '..', 'audio', 'count-padded.raw');

  const agent = new RealtimeAgent({
    name: 'Transcription Agent',
    instructions: 'You are a transcription agent. Listen to audio and provide transcription only.'
  });

  const session = new RealtimeSession(agent, {
    transport: 'websocket',
    model: 'gpt-4o-realtime-preview-2025-06-03',
    // config: {
    //   turnDetection: {
    //     type: 'server_vad',
    //     threshold: 0.5,
    //     prefix_padding_ms: 300,
    //     silence_duration_ms: 1000,
    //   },
    // },
  });

  // Set up audio response file streaming
  const rawFile = path.join(__dirname, 'response.raw');
  const outputFile = path.join(__dirname, 'response.wav');
  const audioWriteStream = fs.createWriteStream(rawFile);
  let hasAudioResponse = false;
  
  // Log all transport events
  session.transport.on('*', (event) => {
    console.log('ðŸ“¨ Event:', event.type, event);
  });

  // Stream audio response directly to file
  session.transport.on('response.audio.delta', (event) => {
    if (event.delta) {
      const audioBuffer = Buffer.from(event.delta, 'base64');
      audioWriteStream.write(audioBuffer);
      hasAudioResponse = true;
      console.log(`Audio response chunk: ${audioBuffer.length} bytes`);
    }
  });

  // Handle response completion
  session.transport.on('response.done', () => {
    console.log('Response complete, saving audio...');
    
    audioWriteStream.end(() => {
      if (hasAudioResponse) {
        // Convert to WAV using sox
        try {
          execSync(`sox -r 24000 -e signed-integer -b 16 -c 1 -t raw "${rawFile}" "${outputFile}"`);
          console.log(`Audio response saved to ${outputFile}`);
          fs.unlinkSync(rawFile); // Clean up raw file
        } catch (error) {
          console.error('Error converting to WAV:', error.message);
          console.log(`Raw audio saved to ${rawFile}`);
        }
      }
      
      console.log('Test complete, exiting...');
      process.exit(0);
    });
  });

  console.log('Connecting...');
  await session.connect({ apiKey: process.env.OPENAI_API_KEY });
  console.log('Connected!');

  console.log('Sending audio in realtime chunks...');

  // Create throttle stream
  const { Transform } = await import('stream');

  class ThrottleStream extends Transform {
    constructor(bytesPerSecond) {
      super();
      this.bytesPerSecond = bytesPerSecond;
      this.totalBytesSent = 0;
      this.startTime = Date.now();
    }

    _transform(chunk, _encoding, callback) {
      this.totalBytesSent += chunk.length;

      // Calculate when this chunk should be sent
      const expectedTime = (this.totalBytesSent / this.bytesPerSecond) * 1000;
      const elapsedTime = Date.now() - this.startTime;
      const delay = Math.max(0, expectedTime - elapsedTime);

      setTimeout(() => {
        console.log(`Sending chunk (${chunk.length} bytes)`);
        this.push(chunk);
        callback();
      }, delay);
    }
  }

  // PCM16 at 24kHz = 24000 samples/sec * 2 bytes = 48000 bytes/sec
  const BYTES_PER_SECOND = 48000;
  const throttleStream = new ThrottleStream(BYTES_PER_SECOND);

  // Create a passthrough stream that sends audio to session
  class AudioSender extends Transform {
    _transform(chunk, _encoding, callback) {
      session.sendAudio(chunk);
      callback();
    }
  }

  const audioSender = new AudioSender();

  fs.createReadStream(audioFile)
    .pipe(throttleStream)
    .pipe(audioSender)
    .on('finish', () => {
      console.log('All audio sent!');
    });
}

await testTranscription();
