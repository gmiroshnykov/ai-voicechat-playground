#!/usr/bin/env node

import fs from 'fs';
import Speaker from 'speaker';
import { Command } from 'commander';

function playRawFile(filename, options = {}) {
  console.log(`Playing raw audio: ${filename}`);
  
  // Default format matches your mic recording format
  const format = {
    channels: options.channels || 1,
    sampleRate: options.sampleRate || 22050,
    bitDepth: options.bitDepth || 16,
    signed: options.signed !== false // default to true
  };
  
  console.log(`Format: ${format.channels} channels, ${format.sampleRate}Hz, ${format.bitDepth}-bit, ${format.signed ? 'signed' : 'unsigned'}`);
  
  const audioData = fs.readFileSync(filename);
  console.log(`Data size: ${audioData.length} bytes`);
  
  const speaker = new Speaker({
    channels: format.channels,
    bitDepth: format.bitDepth,
    sampleRate: format.sampleRate,
    signed: format.signed
  });

  speaker.on('open', () => {
    console.log('Audio playback started');
  });
  
  speaker.on('close', () => {
    console.log('Audio playback finished');
  });
  
  speaker.on('error', (err) => {
    console.error('Speaker error:', err);
  });

  speaker.write(audioData);
  speaker.end();
}

const program = new Command();

program
  .name('play-raw')
  .description('Play raw PCM audio files')
  .version('1.0.0')
  .argument('<raw-file>', 'Raw PCM file to play')
  .option('--channels <n>', 'Number of audio channels', '1')
  .option('--sample-rate <n>', 'Sample rate in Hz', '22050')
  .option('--bit-depth <n>', 'Bit depth: 8, 16, 24, 32', '16')
  .option('--unsigned', 'Use unsigned PCM data (default: signed)', false)
  .action((filename, options) => {
    if (!fs.existsSync(filename)) {
      console.error(`File not found: ${filename}`);
      process.exit(1);
    }

    // Parse and validate options
    const parsedOptions = {
      channels: parseInt(options.channels),
      sampleRate: parseInt(options.sampleRate),
      bitDepth: parseInt(options.bitDepth),
      signed: !options.unsigned
    };

    // Validate options
    if (isNaN(parsedOptions.channels) || parsedOptions.channels < 1) {
      console.error('Invalid channels value');
      process.exit(1);
    }
    if (isNaN(parsedOptions.sampleRate) || parsedOptions.sampleRate < 1000) {
      console.error('Invalid sample rate value');
      process.exit(1);
    }
    if (![8, 16, 24, 32].includes(parsedOptions.bitDepth)) {
      console.error('Invalid bit depth (must be 8, 16, 24, or 32)');
      process.exit(1);
    }

    try {
      playRawFile(filename, parsedOptions);
    } catch (error) {
      console.error('Error playing file:', error.message);
      process.exit(1);
    }
  });

program.parse();